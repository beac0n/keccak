/*
 * main.cpp
 *
 *  Created on: 28.07.2014
 *      Author: Maximilian Schempp
 */

#include <stdint.h>
#include <string.h>
#include <iostream>
#include <stdio.h>
#include <ctype.h>
#include <algorithm>
#include "Keccak.h"
#include "KeccakPppprocessing.h"
#include "KeccakPppprocessingEarlyParity.h"
#include "KeccakPppprocessingEfficientInplace.h"
#include "KeccakPpppEficcientInplaceEarlyParity.h"

#ifndef outputSize
#define outputSize 32
#endif

bool testKeccakImplementation(Keccak* keccak, char* keccakAlgorithm, const char* testString, int size, uint8_t expectedOutput[outputSize]) {
    uint8_t* actualOutputKeccak = keccak->keccak((uint8_t*) testString, size);

    std::cout << "Testing " << keccakAlgorithm << " - ";
    bool fail = memcmp(expectedOutput, actualOutputKeccak, outputSize);
    std::cout << (fail ? "Fail" : "Success") << std::endl;
    if (fail) {
        std::cout << "Output: ";
        for (int i = 0; i < 32; ++i) {
            if (!(i % 8)) std::cout << std::endl;
            std::cout << "0x" << std::uppercase << std::hex << (int)(unsigned char) *(actualOutputKeccak + i) << " ";
        }
        std::cout << std::endl << std::endl;
    }


    delete[] (actualOutputKeccak);

    return fail;
}

bool testAllKeccakImplementation(const char* testString, int size, uint8_t expectedOutput[outputSize]) {
    Keccak* keccak = new Keccak();
    Keccak* keccakPppprocessing = new KeccakPppprocessing();
    Keccak* keccakPppprocessingEarlyParity = new KeccakPppprocessingEarlyParity();
    Keccak* keccakPppprocessingEfficientInplace = new KeccakPppprocessingEfficientInplace();
    Keccak* keccakPpppEficcientInplaceEarlyParity = new KeccakPpppEficcientInplaceEarlyParity();

    std::cout << "==============================" << std::endl;
    bool succK = true;
    !testKeccakImplementation(keccak,
            "Reference Implementation", testString, size, expectedOutput);
    bool succPppp = !testKeccakImplementation(keccakPppprocessing,
            "Plane-Per-Plane Processing", testString, size, expectedOutput);
    bool succPpppEp = !testKeccakImplementation(keccakPppprocessingEarlyParity,
            "Plane-Per-Plane Processing with early parity", testString, size, expectedOutput);
    bool succPpppEi = !testKeccakImplementation(keccakPppprocessingEfficientInplace,
            "Plane-Per-Plane Processing with efficient in-place implementation", testString, size, expectedOutput);
    bool succPpppEiEp = !testKeccakImplementation(keccakPpppEficcientInplaceEarlyParity,
            "Plane-Per-Plane Processing with efficient in-place implementation and early parity", testString, size, expectedOutput);

    bool retVal = succK && succPppp && succPpppEp && succPpppEi && succPpppEiEp;

    std::cout << (retVal ? "OVERALL SUCCESS" : "Fail") << std::endl;
    std::cout << "==============================" << std::endl << std::endl;

    delete (keccak);
    delete (keccakPppprocessing);
    delete (keccakPppprocessingEarlyParity);
    delete (keccakPppprocessingEfficientInplace);
    delete (keccakPpppEficcientInplaceEarlyParity);

    return retVal;
}

bool testAllKeccakImplementation(const char* testString, uint8_t expectedOutput[outputSize]) {
    return testAllKeccakImplementation(testString, strlen(testString), expectedOutput);
}

void hexStringToCharArray(char* charArray, char* hexString) {
    char *dst = charArray;
    char *end = charArray + strlen(hexString);
    unsigned int u;

    while (dst < end && sscanf(hexString, "%2x", &u) == 1) {
        *dst++ = u;
        hexString += 2;
    }
}

void hexStringToUint8_tArray(uint8_t* bytearray, char* hexstring) {
    int i;
    uint8_t str_len = strlen(hexstring);

    for (i = 0; i < (str_len / 2); i++) {
        sscanf(hexstring + 2 * i, "%02x", &bytearray[i]);
    }
}

bool testHexInputStrings(char** inputList, char** outputList, int listSize) {
    bool retVal = true;

    for (int i = 0; i < listSize; ++i) {
        int size = strlen(inputList[i]) / 2;
        char* buffer = new char[size];
        hexStringToCharArray(buffer, inputList[i]);

        uint8_t expectedOutput[32];
        hexStringToUint8_tArray(expectedOutput, outputList[i]);

        retVal = retVal && testAllKeccakImplementation(buffer, size, expectedOutput);
    }

    return retVal;
}

int main() {

    int listSize = 3;

    char** inputList = new char*[listSize];
    char** outputList = new char*[listSize];

    inputList[0] = "724627916C50338643E6996F07877EAFD96BDF01DA7E991D4155B9BE1295EA7D21C9391F4C4A41C75F77E5D27389253393725F1427F57914B273AB862B9E31DABCE506E558720520D33352D119F699E784F9E548FF91BC35CA147042128709820D69A8287EA3257857615EB0321270E94B84F446942765CE882B191FAEE7E1C87E0F0BD4E0CD8A927703524B559B769CA4ECE1F6DBF313FDCF67C572EC4185C1A88E86EC11B6454B371980020F19633B6B95BD280E4FBCB0161E1A82470320CEC6ECFA25AC73D09F1536F286D3F9DACAFB2CD1D0CE72D64D197F5C7520B3CCB2FD74EB72664BA93853EF41EABF52F015DD591500D018DD162815CC993595B195";
    outputList[0] = "EA0E416C0F7B4F11E3F00479FDDF954F2539E5E557753BD546F69EE375A5DE29";

    inputList[1] = "4FBDC596508D24A2A0010E140980B809FB9C6D55EC75125891DD985D37665BD80F9BEB6A50207588ABF3CEEE8C77CD8A5AD48A9E0AA074ED388738362496D2FB2C87543BB3349EA64997CE3E7B424EA92D122F57DBB0855A803058437FE08AFB0C8B5E7179B9044BBF4D81A7163B3139E30888B536B0F957EFF99A7162F4CA5AA756A4A982DFADBF31EF255083C4B5C6C1B99A107D7D3AFFFDB89147C2CC4C9A2643F478E5E2D393AEA37B4C7CB4B5E97DADCF16B6B50AAE0F3B549ECE47746DB6CE6F67DD4406CD4E75595D5103D13F9DFA79372924D328F8DD1FCBEB5A8E2E8BF4C76DE08E3FC46AA021F989C49329C7ACAC5A688556D7BCBCB2A5D4BE69D3284E9C40EC4838EE8592120CE20A0B635ECADAA84FD5690509F54F77E35A417C584648BC9839B974E07BFAB0038E90295D0B13902530A830D1C2BDD53F1F9C9FAED43CA4EED0A8DD761BC7EDBDDA28A287C60CD42AF5F9C758E5C7250231C09A582563689AFC65E2B79A7A2B68200667752E9101746F03184E2399E4ED8835CB8E9AE90E296AF220AE234259FE0BD0BCC60F7A4A5FF3F70C5ED4DE9C8C519A10E962F673C82C5E9351786A8A3BFD570031857BD4C87F4FCA31ED4D50E14F2107DA02CB5058700B74EA241A8B41D78461658F1B2B90BFD84A4C2C9D6543861AB3C56451757DCFB9BA60333488DBDD02D601B41AAE317CA7474EB6E6DD";
    outputList[1] = "0EA33E2E34F572440640244C7F1F5F04697CE97139BDA72A6558D8663C02B388";

    inputList
    outputList[2] = "86EC5342AB7607103547985BD832A271426ACDE8DCAC941AA7C4FF17CFB17602";

    bool success = testHexInputStrings(inputList, outputList, listSize);

    std::cout << (success ? "All Strings tested correctly" : "Fail") << std::endl;

    return 0;
}

